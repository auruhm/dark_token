// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class _Approval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
      assert(id !== null, "Cannot save _Approval entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save _Approval entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
      store.set("_Approval", id.toString(), this);
  }

    static load(id: string): _Approval | null {
        return store.get("_Approval", id) as _Approval | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get _owner(): Bytes {
    let value = this.get("_owner");
    return value.toBytes();
  }

  set _owner(value: Bytes) {
    this.set("_owner", Value.fromBytes(value));
  }

  get _spender(): Bytes {
    let value = this.get("_spender");
    return value.toBytes();
  }

  set _spender(value: Bytes) {
    this.set("_spender", Value.fromBytes(value));
  }

  get _value(): BigInt {
    let value = this.get("_spender");
    return value.toBigInt();
}

  set _value(value: BigInt) {
    this.set("_value", Value.fromBigInt(value));
}
}

export class _DelegateChanged extends Entity {
    constructor(id: string) {
        super();
        this.set("id", Value.fromString(id));
    }

    save(): void {
        let id = this.get("id");
        assert(id !== null, "Cannot save _DelegateChanged entity without an ID");
        assert(
            id.kind == ValueKind.STRING,
            "Cannot save _DelegateChanged entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.'
        );
        store.set("_DelegateChanged", id.toString(), this);
    }

    static load(id: string): _DelegateChanged | null {
        return store.get("_DelegateChanged", id) as _DelegateChanged | null;
    }

    get id(): string {
        let value = this.get("id");
        return value.toString();
    }

    set id(value: string) {
        this.set("id", Value.fromString(value));
    }

    get count(): BigInt {
        let value = this.get("count");
        return value.toBigInt();
    }

    set count(value: BigInt) {
        this.set("count", Value.fromBigInt(value));
    }

    get _fromDelegate(): Bytes {
        let value = this.get("_fromDelegate");
        return value.toBytes();
    }

    set _fromDelegate(value: Bytes) {
        this.set("_fromDelegate", Value.fromBytes(value));
    }

    get _toDelegate(): Bytes {
        let value = this.get("_toDelegate");
        return value.toBytes();
    }

    set _toDelegate(value: Bytes) {
        this.set("_toDelegate", Value.fromBytes(value));
    }

    get _delegator(): Bytes {
        let value = this.get("_delegator");
        return value.toBytes();
    }

    set _delegator(value: Bytes) {
        this.set("_delegator", Value.fromBytes(value));
    }
}

export class _DelegateVotesChanged extends Entity {
    constructor(id: string) {
        super();
        this.set("id", Value.fromString(id));
    }

    save(): void {
        let id = this.get("id");
        assert(id !== null, "Cannot save _DelegateVotesChanged entity without an ID");
        assert(
            id.kind == ValueKind.STRING,
            "Cannot save _DelegateVotesChanged entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.'
        );
        store.set("_DelegateVotesChanged", id.toString(), this);
    }

    static load(id: string): _DelegateVotesChanged | null {
        return store.get("_DelegateVotesChanged", id) as _DelegateVotesChanged | null;
    }

    get id(): string {
        let value = this.get("id");
        return value.toString();
    }

    set id(value: string) {
        this.set("id", Value.fromString(value));
    }

    get count(): BigInt {
        let value = this.get("count");
        return value.toBigInt();
    }

    set count(value: BigInt) {
        this.set("count", Value.fromBigInt(value));
    }

    get _delegate(): Bytes {
        let value = this.get("_delegate");
        return value.toBytes();
    }

    set _delegate(value: Bytes) {
        this.set("_delegate", Value.fromBytes(value));
    }

    get _previousBalance(): BigInt {
        let value = this.get("_previousBalance");
        return value.toBigInt();
    }

    set _previousBalance(value: BigInt) {
        this.set("_previousBalance", Value.fromBigInt(value));
    }

    get _newBalance(): BigInt {
        let value = this.get("_newBalance");
        return value.toBigInt();
    }

    set _newBalance(value: BigInt) {
        this.set("_newBalance", Value.fromBigInt(value));
    }

}

export class _Transfer extends Entity {
    constructor(id: string) {
        super();
        this.set("id", Value.fromString(id));
    }

    save(): void {
        let id = this.get("id");
        assert(id !== null, "Cannot save _Transfer entity without an ID");
        assert(
            id.kind == ValueKind.STRING,
            "Cannot save _Transfer entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.'
        );
        store.set("_Transfer", id.toString(), this);
    }

    static load(id: string): _Transfer | null {
        return store.get("_Transfer", id) as _Transfer | null;
    }

    get id(): string {
        let value = this.get("id");
        return value.toString();
    }

    set id(value: string) {
        this.set("id", Value.fromString(value));
    }

    get count(): BigInt {
        let value = this.get("count");
        return value.toBigInt();
    }

    set count(value: BigInt) {
        this.set("count", Value.fromBigInt(value));
    }

    get _from(): Bytes {
        let value = this.get("_from");
        return value.toBytes();
    }

    set _from(value: Bytes) {
        this.set("_from", Value.fromBytes(value));
    }

    get _to(): Bytes {
        let value = this.get("_to");
        return value.toBytes();
    }

    set _to(value: Bytes) {
        this.set("_to", Value.fromBytes(value));
    }

    get _value(): BigInt {
        let value = this.get("_value");
        return value.toBigInt();
    }

    set _value(value: BigInt) {
        this.set("_value", Value.fromBigInt(value));
    }

}
